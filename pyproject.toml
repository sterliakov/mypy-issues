[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[dependency-groups]
dev = [
    "mypy>=1.14.1",
    "types-pygments>=2.19.0.20250107",
    "types-tqdm>=4.67.0.20241221",
]

[project]
authors = [
    {name = "STerliakov", email = "terlya.stas@gmail.com"},
]
dependencies = [
    "githubkit>=0.12.4",
    "markdown-it-py[linkify]>=3.0.0",
    "pygments>=2.19.1",
    "ruff>=0.9.3",
    "tqdm>=4.67.1",
]
description = "Add your description here"
name = "mypy-issues"
readme = "README.md"
requires-python = ">=3.10"
version = "0.1.0"

[project.scripts]
diff = "mypy_issues:run_diff"
fetch = "mypy_issues:fetch_issues"
run = "mypy_issues:run_mypy"

[tool.mypy]
allow_redefinition = true
check_untyped_defs = true
disallow_any_generics = true
disallow_any_unimported = false
disallow_incomplete_defs = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
enable_error_code = [
    "possibly-undefined",
    'redundant-expr',
    'truthy-bool',
    'truthy-iterable',
    'ignore-without-code',
    'unused-awaitable',
]
no_implicit_optional = true
strict = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = true
warn_unused_ignores = true

[tool.ruff]
preview = true
target-version = 'py312'

[tool.ruff.analyze]
detect-string-imports = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
exclude = [
    ".svn",
    "CVS",
    ".bzr",
    ".hg",
    ".git",
    "__pycache__",
    ".tox",
    ".nox",
    ".eggs",
    "*.egg",
    "migrations",
    "manage.py",
]
extend-ignore = [
    "S101",  # Use of `assert` detected
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "TRY003",  # Avoid specifying long messages outside the exception class
    "ANN",  # Type hints
    "D",  # Docstrings
    "TD",  # To-do comment lints
    "FIX",  # Line contains TODO/FIXME/HACK, consider resolving the issue
    "DOC",  # Docstrings
    "CPY",  # copyright
    "TC00",  # Move ... import `...` into a type-checking block
    "EM101",  # Exception must not use a string literal, assign to variable first
    "PLR6301",  # Method `xxx` could be a function, class method, or static method
    "PLC0415",  # `import` should be at the top-level of a file
    "E501",  # Let ruff care about line width, if not splitable - go on
    # conflicts with ruff-fmt
    "COM812",
    # custom
    "S404",  # `subprocess` module is possibly insecure
    "S603",  # `subprocess` call: check for execution of untrusted input
]
extend-safe-fixes = ["F401"]
select = ['ALL']

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
required-imports = ["from __future__ import annotations"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"diff.py" = ["T201"]

[tool.uv]
compile-bytecode = true
link-mode = "copy"
